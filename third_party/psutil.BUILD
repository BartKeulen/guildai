# This file is a reflection of either our total lack of understanding
# of how to perform platform specific build tasks in Bazel, or Bazel's
# total lack of straight-forward support for platform specific build
# tasks, or possibly both.
#
# As we can't have multiple rules with the same output, we need to
# factor the output of psutil's setup.py build_ext command and run it
# multiple times as needed to isolate common output (e.g. posix
# libraries generated by Python 2).
#
# This is probably something that deserves a macro. E.g. py_extension.

load("@org_guildai_guild//third_party:psutil.bzl", "psutil_ext_cmd")

py_library(
    name = "org_psutil",
    srcs = glob(["psutil/*.py"]),
    visibility = ["//visibility:public"],
    data = [
        ":ext",
    ],
)

filegroup(
    name = "ext",
    srcs = select({
        ":linux_x86_64": [
            ":ext_posix_py2",
            ":ext_linux_py2",
            ":ext_linux_py3",
        ],
        ":darwin": [
            ":ext_posix_py2",
            ":ext_darwin_py2",
            ":ext_darwin_py3",
        ],
    })
)

psutil_srcs = glob([
        "setup.py",
        "README.rst",
        "**/*.py",
        "**/*.c",
        "**/*.h",
])

genrule(
    name = "ext_posix_py2",
    srcs = psutil_srcs,
    outs = [
        "psutil/_psutil_posix.so",
    ],
    cmd = psutil_ext_cmd("python2", ""),
)

genrule(
    name = "ext_linux_py2",
    srcs = psutil_srcs,
    outs = [
        "psutil/_psutil_linux.so",
    ],
    cmd = psutil_ext_cmd("python2", ""),
)

genrule(
    name = "ext_linux_py3",
    srcs = psutil_srcs,
    outs = [
        "psutil/_psutil_linux.cpython-35m-x86_64-linux-gnu.so",
        "psutil/_psutil_posix.cpython-35m-x86_64-linux-gnu.so",
    ],
    cmd = psutil_ext_cmd("python3", "psutil"),
)

genrule(
    name = "ext_darwin_py2",
    srcs = psutil_srcs,
    outs = [
        "psutil/_psutil_osx.so",
    ],
    cmd = psutil_ext_cmd("python2", ""),
)

genrule(
    name = "ext_darwin_py3",
    srcs = psutil_srcs,
    outs = [
        "psutil/_psutil_osx.cpython-36m-darwin.so",
        "psutil/_psutil_posix.cpython-36m-darwin.so",
    ],
    cmd = psutil_ext_cmd("python3", "psutil"),
)

config_setting(
        name = "linux_x86_64",
        values = {"cpu": "k8"},
)

config_setting(
        name = "darwin",
        values = {"cpu": "darwin"},
)
